<!--suppress XmlUnboundNsPrefix -->

<!-- the following types are allowed:
	<screen [module="mod"] [screen="classname"]>[arguments]</screen>
		executes Screen called "classname" from module "Screen.mod"
		if no module is given, Screen must be globally available.
		if no screen is given, module is used as screen class name.
		arguments must be comma seperated (will be fed to eval), and can
			use stuff from module
		(of course you must specify at least one of module, screen.)
	<setup id="id" />
		opens a setup with specified id
	<code> .. code .. </code>
		"exec"s code
-->

<!-- Menu -->
<menu text="Mainmenu" title="Main menu">
	<id val="mainmenu" />

	<!-- Menu / Information -->
	<menu weight="5" level="0" text="Information" entryID="info_screen">
		<id val="information" />
		<item weight="5" level="0" text="About" entryID="about_screen"><screen module="About" screen="About"/></item>
		<item weight="7" level="0" text="Devices" entryID="device_screen"><screen module="About" screen="Devices"/></item>
		<item weight="10" level="0" text="Memory" entryID="device_screen"><screen module="About" screen="SystemMemoryInfo"/></item>
		<item weight="15" level="0" text="Network" entryID="device_screen"><screen module="About" screen="SystemNetworkInfo"/></item>
		<item weight="20" level="1" text="Service" entryID="service_info_screen"><screen module="ServiceInfo" screen="ServiceInfo"/></item>
	</menu>

		<item level="1" text="Plugins" entryID="plugin_selection"><screen module="PluginBrowser" screen="PluginBrowser" /></item>

	<!-- Menu / Timer -->
	<menu weight="7" level="0" text="Timers" entryID="timer_menu">
		<id val="timermenu" />
		<item weight="0" level="0" text="Timers" entryID="timer_edit"><screen module="TimerEdit" screen="TimerEditList" /></item>
		<item weight="5" level="0" text="PowerTimers" entryID="powertimer_edit"><screen module="PowerTimerEdit" screen="PowerTimerEditList" /></item>
		<item weight="10" level="0" text="CronTimers" entryID="crontimer_edit"><screen module="CronTimer" screen="CronTimers" /></item>
	</menu>
       
	<!--item weight="10" level="1" text="Plugins" entryID="plugin_selection"><screen module="PluginBrowser" screen="PluginBrowser" /></item-->
	<item weight="15" level="1" text="VCR scart" entryID="scart_switch" configcondition="config.usage.show_vcr_scart" requires="ScartSwitch"><code>self.session.scart.VCRSbChanged(3)</code></item>

	<!-- Menu / Settings -->
	<menu weight="20" level="0" text="Setup" flushConfigOnClose="1" entryID="setup_selection" >
		<id val="setup" />

		<!-- Menu / Settings / Service Searching -->
		<menu weight="0" level="0" text="Service searching" entryID="service_searching_selection">
			<id val="scan" />
			<item weight="0" level="0" text="Tuner configuration" entryID="tuner_setup"><screen module="Satconfig" screen="NimSelection" /></item>
			<item weight="5" level="0" text="Automatic scan" entryID="auto_scan"><screen module="ScanSetup" screen="ScanSimple" /></item>
			<item weight="10" level="0" text="Manual scan" entryID="manual_scan"><screen module="ScanSetup" /></item>
		</menu>
		
		<!-- Menu / Settings / Video Menu -->
		<menu weight="0" level="0" text="Video-Audio-Osd Settings-Display" entryID="video_menu">
			<id val="video_menu" />
			<item weight="0" level="0" text="Basic settings video" entryID="video_setup"><screen module="VideoMode" screen="VideoSetup" /></item>
		
			<id val="audio_menu" />
			<item weight="0" level="0" text="Basic settings audio" entryID="audio_setup"><screen module="VideoMode" screen="AudioSetup" /></item>
			<item weight="0" level="0" entryID="user_interface"><setup id="userinterface" /></item>
				<item weight="10" level="0" text="Skin Setup" entryID="skin_setup"><screen module="SkinSelector" screen="SkinSelector"/></item>
				<item weight="15" level="2" text="OSD Position" entryID="osdsetup" requires="CanChangeOsdPosition"><screen module="UserInterfacePositioner" screen="UserInterfacePositioner2"/></item>
				<item weight="20" level="2" text="OSD 3D Setup" entryID="osd3dsetup" requires="CanChange3DOsd"><screen module="UserInterfacePositioner" screen="OSD3DSetupScreen"/></item>
<id val="display" />
					<item weight="0" level="0" entryID="display_setup"><setup id="display" /></item>
					<item weight="5" level="0" text="Skin setup" entryID="lcd_skin_setup" requires="LCDSKINSetup"><screen module="SkinSelector" screen="LcdSkinSelector"/></item>
		</menu>
  <item weight="10" level="0" text="Parental control" entryID="parental_setup"><screen module="ParentalControlSetup"               screen="ParentalControlSetup" /></item>
                <!-- Menu / Settings / Conf.Recording-Timeshift-->
                <menu weight="0" level="0" text="Recording-Timeshift" entryID="Recording-Timeshift">
                <id val="Recording-Timeshift" />
			<item weight="10" level="0" text="Timeshift settings" entryID="timshift_setup"><screen module="Timershift" screen="TimeshiftSettings" /></item>
				<item weight="15" level="0" text="Recording settings" entryID="recording_setup"><screen module="Recordings"
screen="RecordingSettings" /></item>
		</menu>
           
		<!-- Menu / Settings / Common interface -->
		<menu weight="20" level="1" text="Funzioni Varie" entryID="cam_setup" requires="CommonInterface">
			<id val="cam" />
			<item weight="0" level="1" text="Common Interface" entryID="ci_setup"><screen module="Ci" screen="CiSelection" /></item>
			<item weight="5" level="1" text="Common interface PIN Setup" entryID="ci_setup"><screen module="Ci" screen="CiDefaultPinSetup" /></item>
<item weight="5" level="0" entryID="specialfeatures_menu"><setup id="specialfeatures" /></item>
				<item weight="20" level="1" text="Input devices" entryID="input_device_setup"><screen module="InputDeviceSetup" screen="InputDeviceSelection" /></item>
				<item weight="25" level="1" text="Keyboard" entryID="keyboard"><setup id="keyboard" /></item>
				<item weight="30" level="0" entryID="time_setup"><setup id="time"/></item>
				<item weight="35" level="0" entryID="logs_setup"><setup id="logs" /></item>

		</menu>

		<!-- Menu / Settings / System -->
		<menu weight="0" level="0" text="System" entryID="system_selection">
			<id val="system" />
                        <item weight="10" level="2" entryID="subtitle_setup"><setup id="subtitlesetup" /></item>
			<item weight="15" level="1" entryID="autolanguage_setup"><setup id="autolanguagesetup" /></item>
			<item weight="10" level="0" entryID="remote_setup"><setup id="remotesetup"/></item>
                        <item weight="12" text="Hotkey Setup" entryID="buttonsetup_setup"><screen module="ButtonSetup" screen="ButtonSetup"/></item>
			<item weight="15" level="0" entryID="usage_setup"><setup id="usage" /></item>
			<item weight="20" level="0" entryID="channelselection_setup"><setup id="channelselection" /></item>

			<!-- Menu / Settings / System -->
			<menu weight="25" level="0" text="Devices-Epg-Hdmi Cec" entryID="Devices-EPG-HDMI CEC">
				<id val="Devices-EPG-HDMI CEC" />
                                <item weight="55" level="0" text="HDMI CEC" entryID="hdmicec" requires="HDMICEC">
				<code>
from Plugins.SystemPlugins.HdmiCEC.plugin import HdmiCECSetupScreen
self.session.open(HdmiCECSetupScreen)
</code>
			</item>
<menu level="0" text="Harddisk" entryID="hardisk_selection" requires="Harddisk">
					<id val="harddisk" />
					<item level="1" entryID="harddisk_setup"><setup id="harddisk"/></item>
					<item level="0" text="Initialization" entryID="harddisk_init"><screen module="HarddiskSetup" screen="HarddiskSelection"/></item>
					<item level="0" text="Filesystem check" entryID="harddisk_check"><screen module="HarddiskSetup" screen="HarddiskFsckSelection"/></item>
					<item level="0" text="Convert ext3 filesystem to ext4" entryID="harddisk_convert" requires="ext4"><screen module="HarddiskSetup" screen="HarddiskConvertExt4Selection"/></item>
                                     		</menu>

		<!-- Menu / Settings / EPG -->
		<menu weight="20" level="2" text="EPG" entryID="epg_menu">
			<id val="epg" />
			<!-- Menu / Settings / System / Extended System / EPG / Load Save-->
			<item weight="110" level="2" entryID="setup_epgmulti"><setup id="epgmulti" /></item>
			<item weight="115" level="2" entryID="setup_epgenhanced"><setup id="epgenhanced" /></item>
			<item weight="120" level="2" entryID="setup_epginfobar"><setup id="epginfobar" /></item>
			<item weight="125" level="2" entryID="setup_epginfobargraphical"><setup id="epginfobargraphical" /></item>
			<item weight="130" level="2" entryID="setup_epggraphical"><setup id="epggraphical" /></item>
			<menu weight="200" level="2" text="Load/Save" entryID="epgloadsave_menu">
				<id val="epgloadsave_menu" />
				<item weight="0" level="0" entryID="loadepgcache" text="Load EPG">
					<code>
from Components.EpgLoadSave import EpgLoadMsg
def msgClosed(ret):
	if ret:
		from enigma import eEPGCache
		epgcache = eEPGCache.getInstance()
		epgcache.load()
self.session.openWithCallback(msgClosed, EpgLoadMsg)
</code>
				</item>
				<item weight="50" level="0" entryID="saveepgcache" text="Save EPG">
					<code>
from Components.EpgLoadSave import EpgSaveMsg
def msgClosed(ret):
	if ret:
		from enigma import eEPGCache
		epgcache = eEPGCache.getInstance()
		epgcache.save()
self.session.openWithCallback(msgClosed, EpgSaveMsg)
</code>
				</item>
			</menu>
			<item weight="300" level="0" entryID="epg_setup"><setup id="epgsettings" /></item>
				</menu>

			</menu>

			<item weight="30" level="0" text="Language" entryID="language_setup"><screen module="LanguageSelection" /></item>

			<!-- Menu / Settings / System / Network -->
			<menu weight="35" level="0" text="Network" entryID="network_menu">
				<id val="network" />
				<item weight="0" level="0" text="Device Setup" entryID="device_setup"><screen module="NetworkSetup" screen="NetworkAdapterSelection"/></item>
				<item weight="5" level="1" text="Mounts Setup" entryID="netmounts_setup"><screen module="NetworkSetup" screen="NetworkMountsMenu"/></item>
				<item weight="10" level="2" text="AFP Setup" entryID="netafp_setup"><screen module="NetworkSetup" screen="NetworkAfp"/></item>
				<item weight="15" level="2" text="FTP Setup" entryID="netftp_setup"><screen module="NetworkSetup" screen="NetworkFtp"/></item>
				<item weight="20" level="2" text="Inadyn Setup" entryID="Inadyn_setup"><screen module="NetworkSetup" screen="NetworkInadyn"/></item>
				<item weight="25" level="2" text="MiniDLNA Setup" entryID="minidlna_setup"><screen module="NetworkSetup" screen="NetworkMiniDLNA"/></item>
				<item weight="30" level="2" text="NFS Setup" entryID="netnfs_setup"><screen module="NetworkSetup" screen="NetworkNfs"/></item>
				<item weight="35" level="2" text="OpenVPN Setup" entryID="netvpn_setup"><screen module="NetworkSetup" screen="NetworkOpenvpn"/></item>
				<item weight="40" level="2" text="SABnzbd Setup" entryID="netsabnzbd_setup"><screen module="NetworkSetup" screen="NetworkSABnzbd"/></item>
				<item weight="45" level="2" text="Samba Setup" entryID="netsmba_setup"><screen module="NetworkSetup" screen="NetworkSamba"/></item>
				<item weight="50" level="2" text="Telnet Setup" entryID="nettelnet_setup"><screen module="NetworkSetup" screen="NetworkTelnet"/></item>
				<item weight="55" level="2" text="uShare Setup" entryID="netushare_setup"><screen module="NetworkSetup" screen="NetworkuShare"/></item>
				<item weight="60" level="2" text="Remote Tuner Server Setup" entryID="netrts_setup"><screen module="NetworkSetup" screen="RemoteTunerServer"/></item>
			</menu>

		</menu>

		<item weight="99" level="0" text="Factory reset" entryID="factory_reset">
			<code>
from Screens.FactoryReset import FactoryReset
def msgClosed(ret):
	if ret:
		from os import system, path, _exit
		print"[FACTORY RESET] remove dir /etc/enigma2"
		system("rm -R /etc/enigma2")
		if path.exists("/media/hdd/images/config"):
			system("rm -R /media/hdd/images/config")
		print"[FACTORY RESET] set network to DHCP"
		system("cp -f /usr/share/enigma2/defaults/interfaces /etc/network/interfaces")
		system("/etc/init.d/networking restart")
		if path.exists("/etc/defaultsat.tar.gz"):
			system("mkdir /etc/enigma2")
			system("tar -xzf /etc/defaultsat.tar.gz -C /etc/enigma2")
		_exit(0)
self.session.openWithCallback(msgClosed, FactoryReset)
</code>
		</item>

	</menu>

	<!-- Menu / Standby Restart -->
	<menu weight="99" level="0" text="Standby / Restart" entryID="standby_restart_list">
		<id val="shutdown" />
		<item weight="0" level="0" text="Deep Standby" requires="DeepstandbySupport" entryID="deep_standby">
			<code>
from Screens.Standby import TryQuitMainloop
from Screens.MessageBox import MessageBox
recordings = self.session.nav.getRecordings()
if recordings:
	lastrecordEnd = 0
	for timer in self.session.nav.RecordTimer.timer_list:
		if lastrecordEnd == 0 or lastrecordEnd >= timer.begin:
			print "Set after-event for recording %s to DEEP-STANDBY." % timer.name
			timer.afterEvent = 2
			if timer.end > lastrecordEnd:
				lastrecordEnd = timer.end + 900
	self.session.openWithCallback(self.gotoStandby,MessageBox,_("PowerOff while Recording in progress!\nEntering standby, after recording the box will shutdown."), type = MessageBox.TYPE_INFO, timeout = 10)
else:
	self.session.open(TryQuitMainloop, 1)
</code>
		</item>
		<item weight="5" level="0" text="Shutdown" requires="!DeepstandbySupport" entryID="deep_standby"><screen module="Standby" screen="TryQuitMainloop">1</screen></item>
		<item weight="6" level="0" text="MultiBoot" requires="HaveMultiBoot" entryID="deep_standby"><screen module="MultiBootStartup" screen="MultiBootStartup" /></item>
		<item weight="10" level="0" text="WOL Standby" requires="GBWOL" entryID="deep_standby">
			<code>
from Screens.Standby import TryQuitMainloop
from Screens.MessageBox import MessageBox
recordings = self.session.nav.getRecordings()
if recordings:
	lastrecordEnd = 0
	for timer in self.session.nav.RecordTimer.timer_list:
		if lastrecordEnd == 0 or lastrecordEnd >= timer.begin:
			print "Set after-event for recording %s to DEEP-STANDBY." % timer.name
			timer.afterEvent = 2
			if timer.end > lastrecordEnd:
				lastrecordEnd = timer.end + 900
	self.session.openWithCallback(self.gotoStandby,MessageBox,_("PowerOff while Recording in progress!\nEntering standby, after recording the box will shutdown."), type = MessageBox.TYPE_INFO, timeout = 10)
else:
	self.session.open(TryQuitMainloop, 45)
</code>
		</item>
		<item weight="10" level="0" text="Standby" entryID="standby"><screen module="Standby" screen="Standby"/></item>
		<item weight="15" level="0" text="Restart" entryID="restart"><screen module="Standby" screen="TryQuitMainloop">2</screen></item>
		<item weight="20" level="0" text="Restart Gui" entryID="restart_enigma"><screen module="Standby" screen="TryQuitMainloop">3</screen></item>
		<item weight="25" level="0" text="Shutdown" requires="!DeepstandbySupport" entryID="deep_standby"><screen module="Standby" screen="TryQuitMainloop">1</screen></item>
	</menu>

</menu>
